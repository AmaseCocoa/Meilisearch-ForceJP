name: Check for new Meilisearch releases

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'

jobs:

  check-releases:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
      
    - name: Get latest Meilisearch release
      id: latest_release
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        latest_release=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/meilisearch/meilisearch/releases/latest | jq -r ".tag_name")
        echo "latest_release=$latest_release" >> $GITHUB_OUTPUT
        
    - name: Check if new release exists
      id: new_release
      run: |
        previous_release=$(cat .github/previous.txt || echo "")
        if [ "$previous_release" != "${{ steps.latest_release.outputs.latest_release }}" ]; then
          echo "new_release=true" >> $GITHUB_OUTPUT
        else
          echo "new_release=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create new tag
      if: steps.new_release.outputs.new_release == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        git tag ${{ steps.latest_release.outputs.latest_release }}
        git push origin ${{ steps.latest_release.outputs.latest_release }}

    - name: Create Release
      if: steps.new_release.outputs.new_release == 'true'
      run: |
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_PAT }}" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{
              "tag_name": "${{ steps.latest_release.outputs.latest_release }}",
              "name": "${{ steps.latest_release.outputs.latest_release }}",
              "body": "Japanized Build for https://github.com/meilisearch/meilisearch/releases/tag/${{ steps.latest_release.outputs.latest_release }}",
              "draft": false,
              "prerelease": false
            }'
        
    - name: Save latest release
      if: steps.new_release.outputs.new_release == 'true'
      run: |
        echo "${{ steps.latest_release.outputs.latest_release }}" > .github/previous.txt
